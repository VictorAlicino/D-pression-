OUT_SCOPE_LINE -> VAR_DECLAR <SEMICOLON> | FUNCTION_CALL <SEMICOLON> | DIRECTIVE1 | DIRECTIVE2
EXP -> LINE <SEMICOLON> | <EMPTY>
LINE -> VAR_DECLAR | FUNCTION_CALL | CONTROL_STRUCTURE | WHILE_LOOP | FOR_LOOP | DIRECTIVE1 | DIRECTIVE2

# -------- Extras -------- #
NUM -> NUM_N | NUM_R
GENERIC_ATTR -> <ID> | NUM

# -------- Diretivas de Compilação -------- #
DIRECTIVE1 -> <HASHTAG><DEFINE> <ID> <ID>
DIRECTIVE2 -> <HASHTAG><IMPORT> <ID>

# -------- Tipos de Dados -------- #
TYPE -> <INT> | <FLOAT> | <CHAR_TYPE> | <STRING> | <BOOL> | <VOID>

# -------- Operadores Lógicos -------- #
LOGIC_OPERATOR -> <EQUAL> | <NEQUAL> | <LESS> | <GREATER> | <LEQUAL> | <GEQUAL> | <AND> | <OR> | <NOT>

# -------- Operadores Aritméticos -------- #
ARITH_OPERATOR -> <PLUS> | <MINUS> | <MULT> | <DIV> | <MOD> | <EXP>

# -------- Operadores de Atribuição -------- #
ASSIGN_OPERATOR -> EXP <ASSIGN> GENERIC_ATTR | CALC_ASSIGN | <ID> <INC> NUM | <DEC> NUM
CALC_ASSIGN -> ASSIGN_TYPE <id> | ASSIGN_TYPE <NUM_N> | ASSIGN_TYPE <NUM_R> 
ASSIGN_TYPE -> <ADD_ASSIGN> | <SUB_ASSIGN> | <MUL_ASSIGN 

# -------- Declaração de Variáveis -------- #
VAR_DECLAR -> TYPE VAR_TYPES | TYPE VAR_DECLAR_BODY
VAR_TYPES -> <ID> | <ID> <LBRACKET> <NUM_N> <RBRACKET>
VAR_DECLAR_BODY -> <ID> | <ID> <COMMA> VAR_DECLAR_BODY_EXT
VAR_DECLAR_BODY_EXT -> VAR_DECLAR_BODY | <EMPTY>

# -------- Expressões Matemáticas -------- #
MATH_EXP -> TERM | TERM ARITH_OPERATOR TERM
TERM -> GENERIC_ATTR | <LPAREN> MATH_EXP <RPAREN>

# -------- Condição Lógica -------- #
CONDITION -> EXP LOGIC_OPERATOR EXP COND_EXT | <TRUE> | <FALSE> | <NOT> EXP
COND_EXT -> CONDITION | <EMPTY>

# -------- Funções -------- #
FUNCTION -> TYPE <ID> <LPAREN> PARAMS <RPAREN> <LBRACE> BODY RETURN_MODE <RBRACE>

// Parâmetros da Função
PARAMS -> TYPE <ID> SEPATOR
SEPARATOR -> <COMMA> PARAMS | <EMPTY>

// Modo de Retorno da Função
RETURN_MODE -> <RETURN> <ID> <SEMICOLON> | <EMPTY>

# -------- Chamada de Função -------- #
FUNCTION_CALL -> <ID> <LPAREN> ARGS <RPAREN> <SEMICOLON>
ARGS -> EXP <COMMA> ARGS_EXT | <EMPTY>
ARGS_EXT -> EXP <COMMA> ARGS | <EMPTY>

# -------- Estruturas de Controle -------- #
CONTROL_STRUCTURE -> <IF> <LPAREN> CONDITION <RPAREN> <LBRACE> BODY <RBRACE> ELSE_COND
ELSE_COND -> <EMPTY> | <ELSE> <LBRACE> BODY <RBRACE> | <ELSE> CONTROL_STRUCTURE

# -------- Estrutura de Repetição -------- #
WHILE_LOOP -> <WHILE> <LPAREN> CONDITION <RPAREN> <LBRACE> BODY <RBRACE>

FOR_LOOP -> <FOR> <LPAREN> FOR_INIT <SEMICOLON> CONDITION <SEMICOLON> FOR_INC <RPAREN> <LBRACE> BODY <RBRACE>
FOR_INIT -> EXP | EXP <COMMA> FOR_INIT_EXT | <EMPTY>
FOR_INIT_EXT -> EXP | EXP <COMMA> FOR_INIT | <EMPTY>
FOR_INC -> EXP | EXP <COMMA> FOR_INC_EXT | <EMPTY>
FOR_INC_EXT -> EXP | EXP <COMMA> FOR_INC | <EMPTY>