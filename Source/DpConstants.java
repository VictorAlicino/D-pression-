/* Generated By:JavaCC: Do not edit this line. DpConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DpConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int WHILE = 9;
  /** RegularExpression Id. */
  int FOR = 10;
  /** RegularExpression Id. */
  int RETURN = 11;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int INT = 13;
  /** RegularExpression Id. */
  int FLOAT = 14;
  /** RegularExpression Id. */
  int VOID = 15;
  /** RegularExpression Id. */
  int CHAR_TYPE = 16;
  /** RegularExpression Id. */
  int STRING = 17;
  /** RegularExpression Id. */
  int BOOL = 18;
  /** RegularExpression Id. */
  int TRUE = 19;
  /** RegularExpression Id. */
  int FALSE = 20;
  /** RegularExpression Id. */
  int PRINT = 21;
  /** RegularExpression Id. */
  int MAIN = 22;
  /** RegularExpression Id. */
  int LPAREN = 23;
  /** RegularExpression Id. */
  int RPAREN = 24;
  /** RegularExpression Id. */
  int LBRACE = 25;
  /** RegularExpression Id. */
  int RBRACE = 26;
  /** RegularExpression Id. */
  int LBRACKET = 27;
  /** RegularExpression Id. */
  int RBRACKET = 28;
  /** RegularExpression Id. */
  int DOT = 29;
  /** RegularExpression Id. */
  int COMMA = 30;
  /** RegularExpression Id. */
  int SEMICOLON = 31;
  /** RegularExpression Id. */
  int ID = 32;
  /** RegularExpression Id. */
  int NUM_N = 33;
  /** RegularExpression Id. */
  int NUM_R = 34;
  /** RegularExpression Id. */
  int CHAR = 35;
  /** RegularExpression Id. */
  int PLUS = 36;
  /** RegularExpression Id. */
  int MINUS = 37;
  /** RegularExpression Id. */
  int MULT = 38;
  /** RegularExpression Id. */
  int DIV = 39;
  /** RegularExpression Id. */
  int MOD = 40;
  /** RegularExpression Id. */
  int EXP = 41;
  /** RegularExpression Id. */
  int ASSIGN = 42;
  /** RegularExpression Id. */
  int EQUAL = 43;
  /** RegularExpression Id. */
  int NEQUAL = 44;
  /** RegularExpression Id. */
  int LESS = 45;
  /** RegularExpression Id. */
  int GREATER = 46;
  /** RegularExpression Id. */
  int LEQUAL = 47;
  /** RegularExpression Id. */
  int GEQUAL = 48;
  /** RegularExpression Id. */
  int AND = 49;
  /** RegularExpression Id. */
  int OR = 50;
  /** RegularExpression Id. */
  int NOT = 51;
  /** RegularExpression Id. */
  int COLON = 52;
  /** RegularExpression Id. */
  int QUESTION = 53;
  /** RegularExpression Id. */
  int ARROW = 54;
  /** RegularExpression Id. */
  int INC = 55;
  /** RegularExpression Id. */
  int DEC = 56;
  /** RegularExpression Id. */
  int APOSTROPHE = 57;
  /** RegularExpression Id. */
  int ADD_ASSIGN = 58;
  /** RegularExpression Id. */
  int SUB_ASSIGN = 59;
  /** RegularExpression Id. */
  int MUL_ASSIGN = 60;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"return\"",
    "\"break\"",
    "\"int\"",
    "\"float\"",
    "\"void\"",
    "\"char\"",
    "\"string\"",
    "\"bool\"",
    "\"true\"",
    "\"false\"",
    "\"print\"",
    "\"main\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\";\"",
    "<ID>",
    "<NUM_N>",
    "<NUM_R>",
    "<CHAR>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\":\"",
    "\"?\"",
    "\"->\"",
    "\"++\"",
    "\"--\"",
    "\"\\\'\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
  };

}
